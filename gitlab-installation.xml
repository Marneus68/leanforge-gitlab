<?xml version="1.0" encoding="utf-8" ?>
<tutorial xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://leanforge.dev/tutorial https://github.com/HugoPoi/LeanForge/raw/master/xsd/tutotialschema.xsd">
  <meta>
    <software id="gitlab">
      <name><![CDATA[Gitlab]]></name>
      <website href="https://about.gitlab.com"><![CDATA[Gitlab]]></website>
    </software>
    <plateforms>linux-ubuntu</plateforms>
    <categories>
      <category>manage-sources</category>
      <category>manage-project</category>
    </categories>
    <keywords><![CDATA[git,gitlab,installation,linux]]></keywords>
  </meta>
  <content lang="en-US">
    <title><![CDATA[Tutorial Name]]></title>
	
	<step name ="Overview"> 
	      <substep><text>><![CDATA[
	 The GitLab installation consists of setting up the following components:
<ol>
<li>Packages / Dependencies</li>
<li>Ruby</li>
<li>System Users</li>
<li>Database</li>
<li>GitLab</li>
<li>Nginx</li>
</ol>
      ]]>	
	</text>      </substep>
	</step>
    <step name="First Step">
      <substep><text><![CDATA[
        My first text line. <a class="btn btn-default" href="http://download.software.com/">Download</a>
      ]]></text></substep>
      <substep><text><![CDATA[
        Unzip the downloaded file.
      ]]></text></substep>
      <substep><text><![CDATA[
        Launch executable file "sample.exe"
      ]]></text></substep>
    </step>
    <step name="Second Step">
      <substep><text><![CDATA[
        Go to the configuration menu
      ]]></text></substep>
      <substep><text><![CDATA[
        Configure this settings : .
      ]]></text></substep>
      <substep><text><![CDATA[
        Then click on start button.
      ]]></text></substep>
    </step>
  </content>
  <content lang="fr-FR">
    <title><![CDATA[Gitlab]]></title>
		
		
	<step name="Sélectionnez la version à installer ">
	<substep>
	<text><![CDATA[
	Assurez-vous de la version d'installation de GitLab que vous souhaitez installer. Dans la plupart des cas, ce devrait être la branche du numéro le plus élevé.
	      ]]>	</text>
	</substep>
	</step>
	
	<step name="Packages / Dépendances ">
	<substep>
	<text><![CDATA[
<p>	<b>sudo</b> n'est pas installé sur Debian par défaut. Assurez-vous que votre système est à jour.<br>
	      
<code># run as root!<br>
apt-get update -y<br>
apt-get upgrade -y<br>
apt-get install sudo -y
</code></p>
<p><b>Remarque:</b> Lors de l'installation de certains fichiers devront être modifiés manuellement. 
Si vous êtes familier avec Vim définir comme éditeur par défaut avec les commandes ci-dessous.
 Si vous n'êtes pas familier avec Vim s'il vous plaît sauter ceci et continuer à utiliser l'éditeur par défaut.<br>
 <code>
 # Install vim and set as default editor <br>
sudo apt-get install -y vim<br>
sudo update-alternatives --set editor /usr/bin/vim.basic
 </code></p>
 
 <p>Installez les paquets nécessaires (nécessaires pour compiler Ruby et des extensions natives à gemmes Ruby):<br>
 <code>sudo apt-get install -y build-essential zlib1g-dev libyaml-dev libssl-dev libgdbm-dev libreadline-dev libncurses5-dev libffi-dev curl openssh-server redis-server checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libicu-dev logrotate python-docutils</code>
 </p>
 
 <p>Assurez-vous que vous avez la bonne version de Git installé <br>
 <code># Install Git <br>
sudo apt-get install -y git-core <br>
 <br>
# Make sure Git is version 1.7.10 or higher, for example 1.7.12 or 2.0.0 <br>
git --version</code>
 </p>
 
 <p>Le système de package de Git est trop vieux ? Retirez-le et compiler à partir des sources.<br>
 <code># Remove packaged Git<br>
sudo apt-get remove git-core<br>
<br>
# Install dependencies<br>
sudo apt-get install -y libcurl4-openssl-dev libexpat1-dev gettext libz-dev libssl-dev build-essential<br>
<br>
# Download and compile from source<br>
cd /tmp<br>
curl --progress https://www.kernel.org/pub/software/scm/git/git-2.0.0.tar.gz | tar xz<br>
cd git-2.0.0/<br>
make prefix=/usr/local all<br>
<br>
# Install into /usr/local/bin<br>
sudo make prefix=/usr/local install<br>
<br>
# When editing config/gitlab.yml (Step 5), change the git bin_path to /usr/local/bin/git</code>
 </p>
 <p>
 <b>Remarque:</b> Afin de recevoir des notifications par courrier électronique, assurez-vous d'installer un serveur de messagerie. Par défaut, Debian est livré avec exim4 alors que Ubuntu n'est pas livré avec un. Le serveur de courrier recommandé est postfix et vous pouvez l'installer avec:<br>
 <code>sudo apt-get install -y postfix</code>
 </p>
 <p>Ensuite, sélectionnez le «site Internet» et appuyez sur Entrée pour confirmer le nom d'hôte.</p>
		  ]]>	
		  </text>
	</substep>
	</step>
	
	<step name="Ruby">
	<substep>
	<text><![CDATA[
	<p>
	Retirez l'ancien Ruby 1.8 si présent<br>
	<code>sudo apt-get remove ruby1.8</code>
	</p>
	<p>Télécharger Ruby et compile le:<br>
	<code>mkdir /tmp/ruby && cd /tmp/ruby<br>
curl --progress ftp://ftp.ruby-lang.org/pub/ruby/2.1/ruby-2.1.2.tar.gz | tar xz<br>
cd ruby-2.1.2<br>
./configure --disable-install-rdoc<br>
make<br>
sudo make install</code>
	</p>
	<p>Installez le Bundler Gem:
	<code>sudo gem install bundler --no-ri --no-rdoc</code>
	</p>
	      ]]>	</text>
	</substep>
	</step>
	
	<step name="Les utilisateurs du système">
	<substep>
	<text><![CDATA[
	<p>
	Créez un utilisateur git pour Gitlab:<br>
	<code>sudo adduser --disabled-login --gecos 'GitLab' git</code>
	</p>
	
	      ]]>	</text>
	</substep>
	</step>
	
	<step name="Base de données">
	<substep>
	<text><![CDATA[
	<p>
	Nous vous recommandons d'utiliser une base de données PostgreSQL. Pour vérifier MySQL <a class="btn btn-default"  href="https://gitlab.com/gitlab-org/gitlab-ce/blob/master/doc/install/database_mysql.md">MySQL guide d'installation.</a> Remarque: car nous avons besoin de faire usage d'extensions donc vous avez besoin au moins pgsql 9.1.<br>
	<code># Install the database packages<br>
sudo apt-get install -y postgresql-9.1 postgresql-client libpq-dev<br>
<br>
# Login to PostgreSQL<br>
sudo -u postgres psql -d template1<br>
<br>
# Create a user for GitLab.<br>
template1=# CREATE USER git CREATEDB;<br>
<br>
# Create the GitLab production database & grant all privileges on database<br>
template1=# CREATE DATABASE gitlabhq_production OWNER git;<br>
<br>
# Quit the database session<br>
template1=# \q<br>
<br>
# Try connecting to the new database with the new user<br>
sudo -u git -H psql -d gitlabhq_production</code>
	</p>
	
	      ]]>	</text>
	</substep>
	</step>
	
		<step name="GitLab">
	<substep>
	<text><![CDATA[
	<p>
	
	<code># We'll install GitLab into home directory of the user "git"<br>
cd /home/git</code>
	</p>
	<p>
	<h2>Cloner le Source</h2>
	<code># Clone GitLab repository<br>
sudo -u git -H git clone https://gitlab.com/gitlab-org/gitlab-ce.git -b 7-0-stable gitlab<br>

# Go to gitlab dir<br>
cd /home/git/gitlab</code>
	</p>
	<p>
	<h2>Configurer</h2>
	<code>
	cd /home/git/gitlab<br>

# Copy the example GitLab config<br>
sudo -u git -H cp config/gitlab.yml.example config/gitlab.yml<br>
<br>
# Make sure to change "localhost" to the fully-qualified domain name of your<br>
# host serving GitLab where necessary<br>
#<br>
# If you want to use https make sure that you set `https` to `true`. See #using-https for all necessary details.<br>
#<br>
# If you installed Git from source, change the git bin_path to /usr/local/bin/git<br>
sudo -u git -H editor config/gitlab.yml<br>

# Make sure GitLab can write to the log/ and tmp/ directories<br>
sudo chown -R git log/<br>
sudo chown -R git tmp/<br>
sudo chmod -R u+rwX log/<br>
sudo chmod -R u+rwX tmp/<br>
<br>
# Create directory for satellites<br>
sudo -u git -H mkdir /home/git/gitlab-satellites<br>
sudo chmod u+rwx,g=rx,o-rwx /home/git/gitlab-satellites<br>
<br>
# Make sure GitLab can write to the tmp/pids/ and tmp/sockets/ directories<br>
sudo chmod -R u+rwX tmp/pids/<br>
sudo chmod -R u+rwX tmp/sockets/<br>
<br>
# Make sure GitLab can write to the public/uploads/ directory<br>
sudo chmod -R u+rwX  public/uploads<br>
<br>
# Copy the example Unicorn config<br>
sudo -u git -H cp config/unicorn.rb.example config/unicorn.rb<br>
<br>
# Enable cluster mode if you expect to have a high load instance<br>
# Ex. change amount of workers to 3 for 2GB RAM server<br>
sudo -u git -H editor config/unicorn.rb<br>
<br>
# Copy the example Rack attack config<br>
sudo -u git -H cp config/initializers/rack_attack.rb.example config/initializers/rack_attack.rb<br>
<br>
# Configure Git global settings for git user, useful when editing via web<br>
# Edit user.email according to what is set in gitlab.yml<br>
sudo -u git -H git config --global user.name "GitLab"<br>
sudo -u git -H git config --global user.email "example@example.com"<br>
sudo -u git -H git config --global core.autocrlf input<br>
	</code>
	</p>
	<p>
	<b>Remarque importante:</b> Assurez-vous de modifier à la fois gitlab.yml et unicorn.rb pour correspondre à votre configuration.
	</p>
	
	<p>
	<h2>Configurer les paramètres GitLab DB</h2>
	<code># PostgreSQL only:<br>
sudo -u git cp config/database.yml.postgresql config/database.yml<br>
<br>
# MySQL only:<br>
sudo -u git cp config/database.yml.mysql config/database.yml<br>
<br>
# MySQL and remote PostgreSQL only:<br>
# Update username/password in config/database.yml.<br>
# You only need to adapt the production settings (first part).<br>
# If you followed the database guide then please do as follows:<br>
# Change 'secure password' with the value you have given to $password<br>
# You can keep the double quotes around the password<br>
sudo -u git -H editor config/database.yml<br>
<br>
# PostgreSQL and MySQL:<br>
# Make config/database.yml readable to git only<br>
sudo -u git -H chmod o-rwx config/database.yml</code>
	</p>
	
	<p>
	<h2>Installer Gems</h2>
	<p><b>Remarque: </b> undler 1.5.2, vous pouvez appeler paquet install-jN (où N est le nombre de vos cœurs de processeur) et profiter de l'installation parallèle gems différente mesurable dans le temps de la fin (~ 60% plus rapide). Vérifiez le nombre de vos cœurs avec nproc.  D'abord assurez-vous que vous avez bundler> = 1.5.2</p>
	<code>cd /home/git/gitlab<br>
	<br>
# For PostgreSQL (note, the option says "without ... mysql")<br>
sudo -u git -H bundle install --deployment --without development test mysql aws<br>
<br>
# Or if you use MySQL (note, the option says "without ... postgres")<br>
sudo -u git -H bundle install --deployment --without development test postgres aws</code>
	</p>
	
	<p>
	<h2>Installer GitLab shell</h2>
	<p>GitLab Shell est un accès ssh et le logiciel de gestion du référentiel développé spécialement pour GitLab.</p>
	<code># Go to the Gitlab installation folder:<br>
cd /home/git/gitlab<br>
<br>
# Run the installation task for gitlab-shell (replace `REDIS_URL` if needed):<br>
sudo -u git -H bundle exec rake gitlab:shell:install[v1.9.6] REDIS_URL=redis://localhost:6379 RAILS_ENV=production<br>
<br>
# By default, the gitlab-shell config is generated from your main gitlab config.<br>
#<br>
# Note: When using GitLab with HTTPS please change the following:<br>
# - Provide paths to the certificates under `ca_file` and `ca_path` options.<br>
# - The `gitlab_url` option must point to the https endpoint of GitLab.<br>
# - In case you are using self signed certificate set `self_signed_cert` to `true`.<br>
# See #using-https for all necessary details.<br>
#<br>
# You can review (and modify) the gitlab-shell config as follows:<br>
sudo -u git -H editor /home/git/gitlab-shell/config.yml</code>
	</p>
	
	<p>
	<h2>Initialiser la base de données et activer les fonctions avancées</h2>
	<code>sudo -u git -H bundle exec rake gitlab:setup RAILS_ENV=production<br>
<br>
# Type 'yes' to create the database tables.<br>
<br>
# When done you see 'Administrator account created:'</code>
	</p>
	
	<p>
	<h2>Installez Init Script</h2>
	<p>Télécharger le script d'initialisation (/etc/init.d/gitlab):</p>
	<code>sudo cp lib/support/init.d/gitlab /etc/init.d/gitlab</code>
	<p>Si vous installez avec un dossier non par défaut ou une copie de l'utilisateur,modifiez le fichier des valeurs par défaut:</p>
	<code>sudo cp lib/support/init.d/gitlab.default.example /etc/default/gitlab</code>
	</p>
	<p>Si vous avez installé gitlab dans un autre répertoire ou un autre utilisateur que la valeur par défaut, vous devez modifier ces paramètres dans / etc / default / gitlab. Ne pas modifier / etc / init.d / gitlab comme il sera changé sur la mise à niveau. 
<br>
<br>
Faire GitLab démarrer au démarrage:</p>
<code>sudo update-rc.d gitlab defaults 21</code>
<p>
<h2>Configurer logrotate</h2>
<code>sudo cp lib/support/logrotate/gitlab /etc/logrotate.d/gitlab</code>
</p>
<p>
<h2>Vérifier l'état de l'application</h2>
<p>Vérifiez si GitLab et son environnement sont correctement configurés:
<code>sudo -u git -H bundle exec rake gitlab:env:info RAILS_ENV=production</code></p>
</p>
<p>
<h2>Compilez assets</h2>
<code>sudo -u git -H bundle exec rake assets:precompile RAILS_ENV=production</code>
</p>
<p>
<h2>Démarrez votre instance de GitLab </h2>
<code>sudo service gitlab start<br>
# or<br>
sudo /etc/init.d/gitlab restart</code>
</p>
<p>
<h2>Nginx</h2>
</p>


	      ]]>	</text>
	</substep>
	</step>
	
	
	
	
  </content>
</tutorial>
